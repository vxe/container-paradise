#+BEGIN_SRC clojure :tangle core.clj
  (ns home.spotify.core
    (:require [clojure.data.codec.base64]
              [cemerick.url]
              [home.lib :refer :all]
              [clojure.tools.logging :as log])
    (:use
     [com.rpl.specter :refer :all]
     [clojure.java.shell :only [sh]]))
#+END_SRC
* constants
* utilities
** base64 encode
   #+BEGIN_SRC clojure :tangle core.clj
   (defn encode-base64 [original]
  (String. (clojure.data.codec.base64/encode (.getBytes original)) "UTF-8"))
   #+END_SRC
* components
** _login
*** state
**** vars
**** atoms
***** client-secret
#+BEGIN_SRC clojure :tangle core.clj
  (def atm--client-secret (atom ""))
#+END_SRC
***** client-id
#+BEGIN_SRC clojure :tangle core.clj
  (def atm--client-id (atom ""))
#+END_SRC
***** access token
      #+BEGIN_SRC clojure :tangle core.clj
          (def atm--access-token (atom ""))
      #+END_SRC
***** authorization code
      #+BEGIN_SRC clojure :tangle core.clj
        (def atm--authorization-code (atom ""))
      #+END_SRC
***** refresh token
      #+BEGIN_SRC clojure :tangle core.clj
              (def atm--refresh-token (atom ""))
      #+END_SRC
**** agents
**** refs
*** IO 
**** web
***** refresh token initialization
     #+BEGIN_SRC clojure :tangle core.clj
(defn io-web--set-access-token []
  (reset! atm--refresh-token
                     (-> "curl"
                         (sh
                          "-s"
                          "-H"
                          (str "Authorization: Basic " (encode-base64 (str
                                                                       @atm--client-id
                                                                       ":"
                                                                       @atm--client-secret)))
                          "-d"
                          "grant_type=authorization_code"
                          "-d"
                          (str "code=" @atm--authorization-code)
                          "-d"
                          (str "redirect_uri=" "http%3A%2F%2Flocalhost:8888%2Fspotify%2Flogin")
                          "https://accounts.spotify.com/api/token")
                         :out
                         (cheshire.core/parse-string true)
                         :refresh_token)))

(defn io-web--refresh-access-token []
  (reset! atm--access-token
          (-> "curl"
              (sh
               "-s"
               "-H"
               (str "Authorization: Basic " (encode-base64 (str
                                                            @atm--client-id
                                                            ":"
                                                            @atm--client-secret)))
               "-d"
               "grant_type=refresh_token"
               "-d"
               (str "refresh_token=" @atm--refresh-token)
               "https://accounts.spotify.com/api/token")
              :out
              (cheshire.core/parse-string true)
              :access_token)))


     #+END_SRC
**** mem
***** authorization code capture
      #+BEGIN_SRC clojure :tangle core.clj
        (defn io-mem--set-authorization-code [resp]
          (do 
            (reset! atm--authorization-code resp)
            resp))
      #+END_SRC
**** db
**** fs
***** client auth initialization
      #+BEGIN_SRC clojure :tangle core.clj
        (defn io-fs--read-configuration []
          (let [config-file (read-string (slurp (expand-home "~/config.edn")))
                client-secret  (:client-secret config-file)
                client-id (:client-id config-file)]
            (future (reset! atm--client-secret client-secret))
            (future (reset! atm--client-id client-id))))
      #+END_SRC
*** public
**** token updater
     #+BEGIN_SRC clojure clojure :tangle core.clj
       (defn periodic-token-refresh [period]
         (future 
           (loop []
             (doall
              (count (io-web--refresh-access-token))
              (Thread/sleep period))
             (recur))))
     #+END_SRC
**** manual-login
      #+BEGIN_SRC clojure clojure :tangle core.clj
                (defn login []
                  (let
                      [key (do (println "login here\n https://accounts.spotify.com/authorize/?client_id=e11274026afa4840b9b715e7cb0d8fbb&response_type=code&redirect_uri=http://localhost:8888/spotify/login&scope=playlist-read-private%20user-library-read&state=34fFs29kd09")
                               (flush) (read-line)
                               )]
                    (do
                      (io-fs--read-configuration)
                      (io-web--set-access-token)
                      (io-web--refresh-access-token)
                      (periodic-token-refresh 300000))))
      #+END_SRC
** _search
*** state
**** vars
**** atoms
**** agents
**** refs
*** IO 
**** web
     #+BEGIN_SRC clojure :tangle core.clj
       (defn io-web--search [query]
         (try 
           (cheshire.core/parse-string
            (:out
             (sh "curl"
                 "-s"
                 "-H"
                 (str "Authorization: Bearer " @atm--access-token)
                 (str "https://api.spotify.com/v1/search?q=" query))) true)
           (catch Exception e
             (do (io-web--refresh-access-token)
                 (log/error "token expired, try again though, it should be refreshed now")))))
     #+END_SRC
**** mem
**** db
**** fs
     
*** public
**** search
***** get song-id
      #+BEGIN_SRC clojure :tangle core.clj
        (defn get-song-id [song artist]
          (distinct (select [ALL :artists ALL #(re-matches (re-pattern (str ".*" (capitalize-words artist) ".*")) (:name %)) :id]
                            (:items
                             (:tracks (io-web--search
                                       (str (cemerick.url/url-encode (capitalize-words song))
                                            "+artist:"
                                            (cemerick.url/url-encode (capitalize-words artist))
                                            "&type=track")))))))
      #+END_SRC
